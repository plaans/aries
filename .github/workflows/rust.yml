name: Aries

on: push

env:
  CARGO_TERM_COLOR: always

jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-20.04
    steps:
      - name: Install protobuf
        run: sudo apt install libprotobuf-dev protobuf-compiler
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # - uses: Swatinem/rust-cache@v1
      #   with:
      #     cache-on-failure: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  lints:
    name: Rustfmt and Clippy
    runs-on: ubuntu-20.04
    steps:
      - name: Install protobuf
        run: sudo apt install libprotobuf-dev protobuf-compiler
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # - uses: Swatinem/rust-cache@v1
      #   with:
      #     cache-on-failure: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  integration-tests:
    name: Solving
    runs-on: ubuntu-20.04
    steps:
      - name: Install protobuf
        run: sudo apt install libprotobuf-dev protobuf-compiler
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      # - uses: Swatinem/rust-cache@v1
      #   with:
      #     cache-on-failure: true
      - name: Install GNU parallel
        run: sudo apt-get install parallel
      - name: Get problems from LFS
        run: git lfs pull
      - name: SAT solving
        run: ./ci/sat.py debug
      - name: Scheduler testing
        run: ./ci/scheduling.py
      - name: GG solving
        run: ./ci/gg.py
      - name: LCP Solving (PDDL & HDDL)
        run: ./ci/lcp.sh

  unified-planning-api:
    name: Unified Planning API
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Check for new protobuf definitions
        run: |
          # Download the latest protobuf definitions
          printf "Checking for new protobuf definitions...\n"
          git submodule update --init
          rm grpc/api/src/unified_planning.proto
          cp ext/up/unified_planning/unified_planning/grpc/unified_planning.proto grpc/api/src/
          git diff --exit-code
      - name: Install Protobuf
        run: sudo apt install -y libprotobuf-dev protobuf-compiler
      - name: Check if bindings are up to date
        run: |
          printf "Checking if the API is up to date...\n"
          cd grpc/api
          cargo build --profile ci --features=generate_bindings
          cd ../..
          git diff --exit-code
      - name: GRPC Server Solving
        run: python ./ci/grpc.py

  pre-release:
    name: Pre Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy'   # TODO: change to master
    # needs: [lints, units-tests, integration-tests, unified-planning-api] # TODO: ignored to speed up
    steps:
      - name: Checkout repo
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install musl toolchain
        run: rustup target add x86_64-unknown-linux-musl
      - name: Build release binary
        run: | 
          cargo build --release --target x86_64-unknown-linux-musl --bin up-server
          mkdir -p bins/
          cp target/x86_64-unknown-linux-musl/release/up-server bins/up-aries_linux_amd64
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            bins/up-aries_linux_amd64


#  deploy:
#    name: Deploy
#
#    runs-on: ubuntu-20.04
#    env:
#      CARGO_TERM_COLOR: always
#      BUILD_TARGET: x86_64-unknown-linux-gnu
#      BINARY_NAME: up-server
#    steps:
#      - uses: actions/upload-artifact@v2
#        with:
#          name: up-aries_${{ env.BUILD_TARGET }}
#          path: target/release/${{ env.BINARY_NAME }}